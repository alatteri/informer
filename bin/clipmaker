#!/usr/bin/env python

# ------------------------------------------------------------------------------
# START BOOTSTRAP
# ------------------------------------------------------------------------------
try:
    import instinctual
except ImportError, e:
    import os
    import sys
    lib = os.sep.join(os.path.abspath(__file__).split(os.sep)[:-2] + ['lib'])
    sys.path.append(lib)
    import sitecustomize
# ------------------------------------------------------------------------------
# END BOOTSTRAP
# ------------------------------------------------------------------------------

import os
import sys
import time
import instinctual
from instinctual import settings
from instinctual.informer.models import *
from pprint import pprint

shouldRun = True
pending = '/Users/jrichards/dev/instinctual/src/pending.png'
qt_catmovie = '/Users/jrichards/dev/instinctual/src/third_party/bin/catmovie'

while shouldRun:
    # get the clips that need updating
    clip_ids = Frame.objects.filter(in_clip=False).values('clip').distinct()

    for clip_id in clip_ids:
        clip = Clip.objects.get(id=clip_id['clip'])
        print "*" * 80
        print "+ working on clip", clip.id

        max = None
        frames = {}
        for frame in Frame.objects.filter(clip=clip):
            frame.in_clip = True
            frames[frame.number] = frame
            if not max or frame.number > max: max = frame.number

        output = 'democlip_%s.mov' % (clip.id)
        cmd = '%s -self-contained -names-from-stdin -o %s' % (qt_catmovie, output)
        (child_stdin, child_stdout) = os.popen2(cmd)
        for number in range(clip.start, max + 1):
            if number in frames:
                print "Frame [%s] %s" % (number, frames[number].get_image_filename())
                child_stdin.write(frames[number].get_image_filename())
            else:
                print "WARN: frame %s is missing" % (number)
                child_stdin.write(pending)
            child_stdin.write("\n")

        child_stdin.close()

        for frame in frames.values():
            frame.save()

    print "sleeping..."
    time.sleep(10)
