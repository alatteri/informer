#!/usr/bin/env python

# ------------------------------------------------------------------------------
# START BOOTSTRAP
# ------------------------------------------------------------------------------
try:
    import instinctual
except ImportError, e:
    import os
    import sys
    lib = os.sep.join(os.path.abspath(__file__).split(os.sep)[:-2] + ['lib'])
    sys.path.append(lib)
    import sitecustomize
# ------------------------------------------------------------------------------
# END BOOTSTRAP
# ------------------------------------------------------------------------------

import os
import sys
import errno
import tempfile
import commands
from pprint import pprint
from datetime import datetime

import instinctual
from instinctual import settings
from instinctual.informer.models import *

LOG = instinctual.getLogger(__file__)

class LogInfo(object):
    def write(self, msg):
        return LOG.info(msg)

class LogWarn(object):
    def write(self, msg):
        return LOG.warn(msg)

sys.stdout = LogInfo()
sys.stderr = LogWarn()

root = os.sep.join(os.path.abspath(__file__).split(os.sep)[:-2])
tmpdir  = root + '/tmp'
pending = root + '/media/pending.tiff'
ffmpeg  = root + '/third_party/bin/ffmpeg'
qt_fast = root + '/third_party/bin/qt-faststart'

def main():
    # get the lock
    lockfile = tmpdir + '/lockfile'

    try:
        MKDIR(tmpdir)
        flag = os.O_CREAT | os.O_EXCL | os.O_WRONLY
        fd = os.open(lockfile, flag, 0600)
        os.write(fd, str(os.getpid()))
        os.close(fd)
    except OSError, e:
        LOG.info("Unable to acquire lock.")
        sys.exit(1)
    except Exception, e:
        LOG.fatal("Unable to acquire lock: unknown error: %s" % e)
        sys.exit(1)

    try:
        try:
            # get the clips that need updating
            clip_ids = Frame.objects.filter(in_clip=False).values('clip').distinct()
            LOG.info("Lock acquired: %s clips to process..." % len(clip_ids))

            for clip_id in clip_ids:
                makeclip(clip_id)
        except Exception, e:
            LOG.fatal(str(e))
            sys.exit(1)
    finally:
        LOG.info("removing lockfile")
        os.unlink(lockfile)

def makeclip(clip_id):
    clip = Clip.objects.get(id=clip_id['clip'])
    LOG.info("+ working on clip id %s" % clip.id)

    # grab info about the frames that need processing
    max = None
    frames = {}
    for frame in Frame.objects.filter(clip=clip):
        frame.in_clip = True
        frames[frame.number] = frame
        if not max or frame.number > max:
            max = frame.number

    # create the temp workspace
    MKDIR(tmpdir)

    prefix = "%s-%s-%s-" % ('clipmaker', datetime.now().strftime("%Y.%m.%d-%H.%M.%S"), clip.id)
    workspace = tempfile.mkdtemp('', prefix, tmpdir)
    os.chdir(workspace)

    pattern = workspace + '/' + '%06d.tiff'
    for number in range(clip.start, max + 1):
        if number in frames:
            print "Frame [%s] %s" % (number, frames[number].get_image_filename())
            source = frames[number].get_image_filename()
        else:
            print "WARN: frame %s is missing" % (number)
            source = pending
        dest = pattern % (number)
        os.symlink(source, dest)

    # --------------------------------------------------
    # create the hi rez clip
    slow_hi = workspace + '/' + 'slow-hi.mov'
    print "pass hi 1"
    cmd = "%s -r %s -f image2 -vcodec tiff -i %s -threads auto -vcodec libx264 -subq 10 -refs 6 -me umh -me_range 20 -partitions +parti4x4+parti8x8+partp8x8+partp4x4+partb8x8 -qcomp .7 -g 75 -keyint_min 25 -bf 3 -flags +loop+umv -psnr -flags2 +bpyramid+mixed_refs+dct8x8 -coder 1 -cmp +chroma -sc_threshold 40 -i_qfactor .7 -b 2600k -bt 3500k -b_strategy 1 -trellis 1 -rc_eq 'blurCplx^(1-qComp)' -qmin 5 -qmax 35 -qdiff 2 -qscale 1 -pass 1 -y %s" % (ffmpeg, clip.rate, pattern, slow_hi)
    SYSTEM(cmd)

    print "pass hi 2"
    cmd = "%s -r %s -f image2 -vcodec tiff -i %s -threads auto -vcodec libx264 -subq 10 -refs 6 -me umh -me_range 20 -partitions +parti4x4+parti8x8+partp8x8+partp4x4+partb8x8 -qcomp .7 -g 75 -keyint_min 25 -bf 3 -flags +loop+umv -psnr -flags2 +bpyramid+mixed_refs+dct8x8 -coder 1 -cmp +chroma -sc_threshold 40 -i_qfactor .7 -b 2600k -bt 3500k -b_strategy 1 -trellis 1 -rc_eq 'blurCplx^(1-qComp)' -qmin 5 -qmax 35 -qdiff 2 -qscale 1 -pass 2 -y %s" % (ffmpeg, clip.rate, pattern, slow_hi)
    SYSTEM(cmd)

    # qt-faststart it
    fast_hi = workspace + '/' + 'fast-hi.mov'
    cmd = "%s %s %s" % (qt_fast, slow_hi, fast_hi)
    SYSTEM(cmd)

    # --------------------------------------------------
    # create the lo rez clip
    slow_lo = workspace + '/' + 'slow-lo.mov'
    print "pass lo 1"
    cmd = "%s -r %s -f image2 -vcodec tiff -i %s -threads auto -vcodec libx264  -subq 10 -refs 6 -me umh -me_range 20 -partitions +parti4x4+parti8x8+partp8x8+partp4x4+partb8x8 -qcomp 1 -g 5 -keyint_min 25 -bf 3 -flags +loop+umv -psnr -flags2 +bpyramid+mixed_refs+dct8x8 -coder 1 -cmp +chroma -sc_threshold 40 -i_qfactor 1 -b 800k -bt 1150k -b_strategy 1 -trellis 1 -rc_eq 'blurCplx^(1-qComp)' -qmin 10 -qmax 35 -qdiff 2 -qscale 1 -s 544x304 -pass 1 -y %s" % (ffmpeg, clip.rate, pattern, slow_lo)
    SYSTEM(cmd)

    print "pass lo 2"
    cmd = "%s -r %s -f image2 -vcodec tiff -i %s -threads auto -vcodec libx264  -subq 10 -refs 6 -me umh -me_range 20 -partitions +parti4x4+parti8x8+partp8x8+partp4x4+partb8x8 -qcomp 1 -g 5 -keyint_min 25 -bf 3 -flags +loop+umv -psnr -flags2 +bpyramid+mixed_refs+dct8x8 -coder 1 -cmp +chroma -sc_threshold 40 -i_qfactor 1 -b 800k -bt 1150k -b_strategy 1 -trellis 1 -rc_eq 'blurCplx^(1-qComp)' -qmin 10 -qmax 35 -qdiff 2 -qscale 1 -s 544x304 -pass 2 -y %s" % (ffmpeg, clip.rate, pattern, slow_lo)
    SYSTEM(cmd)

    # qt-faststart it
    fast_lo = workspace + '/' + 'fast-lo.mov'
    cmd = "%s %s %s" % (qt_fast, slow_lo, fast_lo)
    SYSTEM(cmd)

    # --------------------------------------------------
    # copy the movies...
    UNLINK(clip.get_movie_hi_filename())
    f = open(fast_hi, 'rb')
    clip.save_movie_hi_file('%s_hi.mov' % clip.id, f.read(), True)

    UNLINK(clip.get_movie_lo_filename())
    f = open(fast_lo, 'rb')
    clip.save_movie_lo_file('%s_lo.mov' % clip.id, f.read(), True)

    # save it
    for frame in frames.values():
        frame.in_clip = True
        frame.save()
        pass

    # cleanup
    # UNLINK(workspace)

# ------------------------------------------------------------------------------
# utility functions
# ------------------------------------------------------------------------------
def UNLINK(path):
    try:
        os.unlink(path)
    except OSError, e:
        if errno.ENOENT != e.errno:
            raise e

def SYSTEM(cmd):
    print cmd
    (result, output) = commands.getstatusoutput(cmd)
    print output

    if 0 != result:
        msg = "Non-Zero (%s) status returned from %s:" % (result, cmd)
        print msg
        raise ValueError(msg + "\n---- BEGIN ----\n%s\n---- END ----" % output)

def MKDIR(dir):
    try:
        os.mkdir(dir)
    except OSError, e:
        if errno.EEXIST != e.errno:
            raise e

# ------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
