<?xml version="1.0" encoding="UTF-8"?>
<project name="directoryService" default="install" basedir=".">
	<property name="src" location="src"/> <!-- java source folder -->
	<property name="bin" location="bin"/> <!-- intermediate build products -->
	<property name="jars" location="jars"/> <!-- jar files -->
	<property name="lib" location="lib"/> <!-- local libraries linked against -->
	<property name="dist" location="dist"/> <!-- build product location -->
	<property name="resources" location="resources"/> <!-- location of general java resources -->

    <!-- Our products.  Signed and unsigned JAR, and html -->
    <property name="jarfile" location="${jars}/${ant.project.name}.jar"/>
    <property name="signed.jarfile" location="${jars}/${ant.project.name}_signed.jar"/>
    <property name="html.file" location="${resources}/${ant.project.name}.html"/>
    <property name="dist.html.file" location="${dist}/${ant.project.name}.html"/>

    <property name="compile.debug" value="true"/>

	<!-- All JARs in the lib directory are merged into the final JAR file.  See the "jar" target
	     if you don't want to do that. -->
    <fileset id="lib.jars" dir="${lib}">
        <include name="**/*.jar"/>
    </fileset>

	<!-- This fileset defines the final products that get copied or FTP'ed to the deployment location. -->
	<fileset id="installed.files" dir="${dist}">			
		<include name="**/*.html"/>
		<include name="**/*_signed.jar"/>
	</fileset>

    <path id="lib.path">
        <fileset refid="lib.jars"/>
    </path>
    
	<!-- Initialization target, for any prelimary setup needed to build -->
	<target name="init" description="Preparation">
		<mkdir dir="${lib}"/>
		<mkdir dir="${bin}"/>
		<mkdir dir="${jars}"/>
	</target>

	<!-- Maximize compatibility in the browser by making the classfiles Java 1.3 compatible. -->
    <target name="compile" depends="init" description="Compile code">
        <javac srcdir="${src}" destdir="${bin}"
            source="1.3" target="1.2"
            includeAntRuntime="no"
            classpathref="lib.path"
            debug="${compile.debug}">
        </javac>
    </target>
    
    <target name="build-jar" depends="compile" description="Build jar">
        <mkdir dir="${dist}"/>
        <jar jarfile="${jarfile}"
            basedir="${bin}"
            manifest="${resources}/Manifest">
            <!-- Merge library jars into final jar file -->
            <zipgroupfileset refid="lib.jars"/>
        </jar>
    </target>

	<!-- See if we already have a private key for this user in ~/.keystore.  -->
    <!-- Note: This tests for an output string of "does not exist", this
               assumes the locale is set to English and will not work for Spanish
               or other languages. -->
	<target name="checkforkey" depends="build-jar" description="Generate private key">
		<exec executable="/usr/bin/keytool" resultproperty="keytool.result" failonerror="false">
			<redirector outputproperty="keytool.output" logError="false"/>
			<arg value="-list"/>
			<arg value="-alias"/>
			<arg value="${user.name}"/>
			<arg value="-storepass"/>
			<arg value="changeit"/>
		</exec>
		<!-- Set the property createPrivateKey, used in genkey below, if there is no key -->
		<condition property="createPrivateKey">
			<not>
				<equals arg1="${keytool.result}" arg2="0"/>
			</not>
		</condition>
	</target>

	<!-- If createPrivateKey is set we need to call genkey.  -->
	<target name="genkey" depends="checkforkey" if="createPrivateKey">
		<echo message="Creating a new key because keytool returned: ${keytool.output}"/>
		<genkey alias="${user.name}" storepass="changeit" >
			<dname>
				<param name="CN" value="${user.name}"/>
				<param name="OU" value="My Division"/>
				<param name="O"  value="__MyCompanyName__"/>
				<param name="C"  value="US"/>
		  	</dname>
		</genkey>
	</target>
	
	<!-- Sign the JAR with the key generated above. -->
	<target name="sign-jar" depends="genkey" description="Sign JAR file">
        <signjar jar="${jarfile}"
            alias="${user.name}"
            storepass="changeit"
			keystore="${user.home}/.keystore"
            signedjar="${signed.jarfile}"/>
    </target>

    <!-- If you need the FTP feature, download commons-net-1.2.1 from
      <http://jakarta.apache.org/site/binindex.cgi#commons-net> and 
	  jakarta-oro-2.0.8 from <http://jakarta.apache.org/site/binindex.cgi#oro>.
	  Expand them, and put the JAR files from each distribution in /Developer/Java/Ant/lib/. 
	  Files will be ftp'ed to "~{user.name}/Sites" on localhost. Make sure you have turned on 
	  ftp access for the host indicated in 'server' -->
    <target name="install-ftp" depends="sign-jar" description="FTP applet files to a remote server. Assume UNIX ftp conventions.">
        <ftp server="localhost"
            userid="${user.name}"
            password="${user.name}"
            remoteDir="Sites"
            action="put"
			chmod="644"
            depends="yes"
            separator="/">
			<fileset refid="installed.files"/>
        </ftp>
    </target>
    
    <target name="install" depends="sign-jar" description="Put all the pieces together in the dist directory">
		<mkdir dir="${dist}"/>
		<!-- Copy jar -->
		<copy toDir="${dist}">
			<fileset dir="${jars}">
				<include name="*_signed.jar"/>
			</fileset>			
		</copy>
        <!-- Copy the HTML -->
        <copy file="${html.file}" todir="${dist}"/>
    </target>

    <target name="run" depends="install" description="Run applet in preferred browser">
        <!-- Use the exec task to open the HTML file -->
        <exec dir="${dist}" executable="/usr/bin/open" os="Mac OS X">
            <arg value="${dist.html.file}"/>
        </exec>
    </target>

    <target name="clean" description="Remove build and dist directories">
        <delete dir="${bin}"/>
        <delete dir="${jars}"/>
        <delete dir="${dist}"/>
    </target>
</project>
